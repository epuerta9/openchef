// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agents.sql

package database

import (
	"context"
	"database/sql"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (id, name, status, remote_client_id) 
VALUES (?, ?, ?, ?) 
RETURNING id, name, status, last_seen, created_at, remote_client_id
`

type CreateAgentParams struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Status         string         `json:"status"`
	RemoteClientID sql.NullString `json:"remote_client_id"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.queryRow(ctx, q.createAgentStmt, createAgent,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.RemoteClientID,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.LastSeen,
		&i.CreatedAt,
		&i.RemoteClientID,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents WHERE id = ?
`

func (q *Queries) DeleteAgent(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteAgentStmt, deleteAgent, id)
	return err
}

const getAgent = `-- name: GetAgent :one
SELECT id, name, status, last_seen, created_at, remote_client_id FROM agents WHERE id = ?
`

func (q *Queries) GetAgent(ctx context.Context, id string) (Agent, error) {
	row := q.queryRow(ctx, q.getAgentStmt, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.LastSeen,
		&i.CreatedAt,
		&i.RemoteClientID,
	)
	return i, err
}

const getAgentByName = `-- name: GetAgentByName :one
SELECT id, name, status, last_seen, created_at, remote_client_id FROM agents 
WHERE name = ? LIMIT 1
`

func (q *Queries) GetAgentByName(ctx context.Context, name string) (Agent, error) {
	row := q.queryRow(ctx, q.getAgentByNameStmt, getAgentByName, name)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.LastSeen,
		&i.CreatedAt,
		&i.RemoteClientID,
	)
	return i, err
}

const listAgents = `-- name: ListAgents :many
SELECT id, name, status, last_seen, created_at, remote_client_id FROM agents
`

func (q *Queries) ListAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.query(ctx, q.listAgentsStmt, listAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.LastSeen,
			&i.CreatedAt,
			&i.RemoteClientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgentStatus = `-- name: UpdateAgentStatus :one
UPDATE agents 
SET status = ?, 
    last_seen = CURRENT_TIMESTAMP 
WHERE id = ? 
RETURNING id, name, status, last_seen, created_at, remote_client_id
`

type UpdateAgentStatusParams struct {
	Status string `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateAgentStatus(ctx context.Context, arg UpdateAgentStatusParams) (Agent, error) {
	row := q.queryRow(ctx, q.updateAgentStatusStmt, updateAgentStatus, arg.Status, arg.ID)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.LastSeen,
		&i.CreatedAt,
		&i.RemoteClientID,
	)
	return i, err
}
